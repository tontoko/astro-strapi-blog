---
import { GraphQLClient } from "graphql-request"
import Layout from "../../layouts/Layout.astro"
import {
  QueryCategoriesDocument,
  QueryBlogSettingsDocument,
} from "../../gql/graphql"
import AppHeader from "../../components/AppHeader.astro"
import type { GetStaticPaths, InferGetStaticPropsType, Page } from "astro"
import type { ComponentSharedSeo } from "../../gql/graphql"
import type { CategoryEntity } from "../../generated/graphql"
import PaginationFooter from "../../components/PaginationFooter.astro"

export const getStaticPaths = (async ({ paginate }) => {
  const client = new GraphQLClient(
    `${import.meta.env.PUBLIC_BACKEND_URL}/graphql`
  )
  const categoriesData =
    (await client.request(QueryCategoriesDocument)).categories?.data ?? []

  return paginate(categoriesData, { pageSize: 10 })
}) satisfies GetStaticPaths

const client = new GraphQLClient(
  `${import.meta.env.PUBLIC_BACKEND_URL}/graphql`
)
const { page } = Astro.props
const { data, currentPage, lastPage } = page as Page<CategoryEntity>
const { title, seo } =
  (await client.request(QueryBlogSettingsDocument)).blogSetting?.data
    ?.attributes ?? {}
---

<Layout
  title={`${title}-categories`}
  seo={(seo as Partial<ComponentSharedSeo>) ?? undefined}
>
  <AppHeader blogTitle={title ?? undefined} />
  <main class="prose mx-10 md:mx-20 my-10 dark:prose-invert divide-y">
    {
      data.map((category) => {
        return (
          <div>
            <article class="break-words pb-8">
              <a
                href={`/categories/show/${category.attributes?.slug}`}
               
              >
                <h3>{category?.attributes?.name}</h3>
              </a>
            </article>
          </div>
        )
      })
    }
  </main>
  <PaginationFooter page={page} />
</Layout>

---
import { GraphQLClient } from "graphql-request"
import Layout from "../../layouts/Layout.astro"
import {
  QueryCategoriesDocument,
  QueryBlogSettingsDocument,
} from "../../gql/graphql"
import AppHeader from "../../components/AppHeader.astro"
import type { GetStaticPaths, InferGetStaticPropsType } from "astro"
import type { ComponentSharedSeo } from "../../gql/graphql"
import type { CategoryEntity } from "../../generated/graphql"

export const getStaticPaths = (async ({ paginate }) => {
  const client = new GraphQLClient(
    `${import.meta.env.PUBLIC_BACKEND_URL}/graphql`
  )
  const categoriesData =
    (await client.request(QueryCategoriesDocument)).categories?.data ?? []

  return paginate(categoriesData, { pageSize: 10 })
}) satisfies GetStaticPaths
type Props = InferGetStaticPropsType<typeof getStaticPaths>

const client = new GraphQLClient(
  `${import.meta.env.PUBLIC_BACKEND_URL}/graphql`
)
const { page } = Astro.props
const { data, currentPage, lastPage } = page
const { title, seo } =
  (await client.request(QueryBlogSettingsDocument)).blogSetting?.data
    ?.attributes ?? {}

const categoryContents = Object.fromEntries(
  await Promise.all(
    data.map(async (category: CategoryEntity) => [
      category?.attributes?.slug,
      category?.attributes?.name,
    ])
  )
)
---

<Layout
  title={title ?? undefined}
  seo={(seo as Partial<ComponentSharedSeo>) ?? undefined}
>
  <AppHeader blogTitle={title ?? undefined} />
  <main class="prose mx-10 md:mx-20 my-10 dark:prose-invert divide-y">
    {
      data.map((category: CategoryEntity) => {
        return (
          <div>
            <article class="break-words pb-8">
              <a
                href={`/categories/show/${category.attributes?.slug}`}
                rel="prefetch"
              >
                <h3>{category?.attributes?.name}</h3>
              </a>
            </article>
          </div>
        )
      })
    }
  </main>
  <footer class="prose dark:prose-invert max-w-none mx-14 mb-20">
    <nav class="flex justify-center">
      <div class="flex justify-between max-w-xs gap-6">
        {
          currentPage !== 1 ? (
            <a
              href={`/categories/${currentPage === 2 ? "" : currentPage - 1}`}
              rel="prefetch"
            >
              Previous
            </a>
          ) : (
            <span>Previous</span>
          )
        }
        {
          currentPage !== lastPage ? (
            <a href={`/categories/${currentPage + 1}`} rel="prefetch">
              Next
            </a>
          ) : (
            <span>Next</span>
          )
        }
      </div>
    </nav>
  </footer>
</Layout>

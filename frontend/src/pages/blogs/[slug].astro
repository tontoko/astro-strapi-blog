---
import { GraphQLClient } from "graphql-request"
import Layout from "../../layouts/Layout.astro"
import {
  QueryPostsDocument,
  QueryBlogSettingsDocument,
} from "../../gql/graphql"
import { marked } from "marked"
import AppHeader from "../../components/AppHeader.astro"
import type { GetStaticPaths, InferGetStaticPropsType } from "astro"
import highlight from "highlight.js"
import { getImage } from "@astrojs/image"

export const getStaticPaths = (async () => {
  const client = new GraphQLClient(`http://127.0.0.1:1337/graphql`)
  const postsData = (await client.request(QueryPostsDocument)).posts?.data ?? []
  return postsData.map((post) => ({
    params: { slug: post.attributes?.slug },
    props: { postItem: post?.attributes },
  }))
}) satisfies GetStaticPaths
type Props = InferGetStaticPropsType<typeof getStaticPaths>

const client = new GraphQLClient(`http://127.0.0.1:1337/graphql`)
const { postItem } = Astro.props
const blogTitle = (await client.request(QueryBlogSettingsDocument)).blogSetting
  ?.data?.attributes?.title

const toc: {
  level: number
  slug: string
  title: string
}[] = []

const renderer = new marked.Renderer({ async: true })
renderer.heading = (text, level) => {
  const slug = encodeURI(text.toLowerCase())
  toc.push({
    level: level,
    slug: slug,
    title: text,
  })
  return "<h" + level + ' id="' + slug + '">' + text + "</h" + level + ">\n"
}
renderer.image = (href, title, text) => {
  return `<img loading="lazy" alt="${text}" title="${title}" src="${href}" width="655" height="368.4375">`
}
marked.setOptions({
  renderer,
  highlight: (code) => {
    return highlight.highlightAuto(code).value
  },
})
const walkTokens = async (token: marked.Token) => {
  if (token.type === "image") {
    const { href, text } = token
    const image = await getImage({
      width: 655,
      height: 368.4375,
      format: "webp",
      src: `http://127.0.0.1:1337${href}`,
      alt: text,
    })
    if (image.src) token.href = image.src
  }
}
marked.use({ walkTokens, async: true })
const parsedMarkdown = await marked.parse(postItem?.content ?? "")
---

<Layout title={blogTitle ?? undefined}>
  <AppHeader blogTitle={blogTitle ?? undefined} />
  <main class="prose mx-10 md:mx-20 mt-10 mb-40 dark:prose-invert break-words">
    <h1>{postItem?.title}</h1>
    <nav>
      <hr />
      <p>目次</p>
      <div class="ml-2">
        {
          toc.map(({ level, slug, title }) => (
            <div style={`margin-left: ${(level - 1) * 16}px;`}>
              <a href={"#" + slug}>{title}</a>
            </div>
          ))
        }
      </div>
    </nav>
    <hr />
    <article set:html={parsedMarkdown} />
  </main>
</Layout>

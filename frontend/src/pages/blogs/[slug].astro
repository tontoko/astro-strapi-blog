---
import { GraphQLClient } from "graphql-request"
import Layout from "../../layouts/Layout.astro"
import {
  QueryPostsDocument,
  QueryBlogSettingsDocument,
} from "../../gql/graphql"
import AppHeader from "../../components/AppHeader.astro"
import type { GetStaticPaths, InferGetStaticPropsType } from "astro"
import { parseWithCustomRenderer } from "../../libs/marked"
import type { ComponentSharedSeo } from "../../gql/graphql"
import type { Post } from "../../generated/graphql"

export const getStaticPaths = (async () => {
  const client = new GraphQLClient(
    `${import.meta.env.PUBLIC_BACKEND_URL}/graphql`
  )
  const postsData = (await client.request(QueryPostsDocument)).posts?.data ?? []
  return postsData.map((post) => ({
    params: { slug: post.attributes?.slug },
    props: { postItem: post?.attributes as Post },
  }))
}) satisfies GetStaticPaths
type Props = InferGetStaticPropsType<typeof getStaticPaths>

const client = new GraphQLClient(
  `${import.meta.env.PUBLIC_BACKEND_URL}/graphql`
)
const { postItem } = Astro.props
const { title, seo: blogSeo } =
  (await client.request(QueryBlogSettingsDocument)).blogSetting?.data
    ?.attributes ?? {}

const { parsedMarkdown, toc } = await parseWithCustomRenderer({
  content: postItem?.content ?? "",
})
---

<Layout
  title={`${title}-${postItem?.title}`}
  seo={({ ...blogSeo, ...postItem?.seo } as Partial<ComponentSharedSeo>) ??
    undefined}
>
  <AppHeader blogTitle={title ?? undefined} />
  <main class="prose mx-10 md:mx-20 mt-10 mb-40 dark:prose-invert break-words">
    <h1>{postItem?.title}</h1>
    <nav>
      <hr />
      <p>目次</p>
      <div class="ml-2">
        {
          toc.map(({ level, slug, title }) => (
            <div style={`margin-left: ${(level - 1) * 16}px;`}>
              <a href={"#" + slug} rel="prefetch">
                {title}
              </a>
            </div>
          ))
        }
      </div>
    </nav>
    <hr />
    <article set:html={parsedMarkdown} />
    <nav>
      <p>
        categories:
        {
          postItem?.categories?.data?.map(({ attributes }) => {
            const { name, slug } = attributes ?? {}
            return (
              <a href={`/categories/show/${slug}`} rel="prefetch">
                {name}
              </a>
            )
          })
        }
      </p>
    </nav>
  </main>
</Layout>

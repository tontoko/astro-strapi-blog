---
import { GraphQLClient } from "graphql-request"
import Layout from "../layouts/Layout.astro"
import { QueryPostsDocument, QueryBlogSettingsDocument } from "../gql/graphql"
import AppHeader from "../components/AppHeader.astro"
import type { GetStaticPaths, InferGetStaticPropsType, Page } from "astro"
import { parseWithCustomRenderer } from "../libs/marked"
import type { ComponentSharedSeo } from "../gql/graphql"
import type { PostEntity } from "../generated/graphql"

export const getStaticPaths = (async ({ paginate }) => {
  const client = new GraphQLClient(
    `${import.meta.env.PUBLIC_BACKEND_URL}/graphql`
  )
  const postsData = (await client.request(QueryPostsDocument)).posts?.data ?? []

  return paginate(postsData, { pageSize: 5 })
}) satisfies GetStaticPaths

const client = new GraphQLClient(
  `${import.meta.env.PUBLIC_BACKEND_URL}/graphql`
)
const { page } = Astro.props
const { data, currentPage, lastPage } = page as Page<PostEntity>
const { title, seo } =
  (await client.request(QueryBlogSettingsDocument)).blogSetting?.data
    ?.attributes ?? {}

const articleContents = Object.fromEntries(
  await Promise.all(
    data.map(async (post: PostEntity) => [
      post?.attributes?.slug,
      (
        await parseWithCustomRenderer({
          content: post?.attributes?.content ?? "",
          small: true,
        })
      ).parsedMarkdown,
    ])
  )
)
---

<Layout
  title={title ?? undefined}
  seo={(seo as Partial<ComponentSharedSeo>) ?? undefined}
>
  <AppHeader blogTitle={title ?? undefined} />
  <main class="prose mx-10 md:mx-20 my-10 dark:prose-invert divide-y">
    {
      data.map((post: PostEntity) => {
        return (
          <div>
            <article class="break-words py-8">
              <a href={`/blogs/${post.attributes?.slug}`} rel="prefetch">
                <h1>{post?.attributes?.title}</h1>
                <div
                  class="line-clamp-3"
                  set:html={articleContents[post?.attributes?.slug ?? ""]}
                />
              </a>
              <nav class="w-full mt-4">
                categories:
                <ul class="flex gap-1 m-0 p-0">
                  {post.attributes?.categories?.data?.map(({ attributes }) => {
                    const { name, slug } = attributes ?? {}
                    return (
                      <li class="list-none m-0">
                        <a href={`/categories/show/${slug}`} rel="prefetch">
                          {name}
                        </a>
                      </li>
                    )
                  })}
                </ul>
              </nav>
            </article>
          </div>
        )
      })
    }
  </main>
  <footer class="prose dark:prose-invert max-w-none mx-14 mb-20">
    <nav class="flex justify-center">
      <div class="flex justify-between max-w-xs gap-6">
        {
          currentPage !== 1 ? (
            <a
              href={`/${currentPage === 2 ? "" : currentPage - 1}`}
              rel="prefetch"
            >
              Previous
            </a>
          ) : (
            <span>Previous</span>
          )
        }
        {
          currentPage !== lastPage ? (
            <a href={`/${currentPage + 1}`} rel="prefetch">
              Next
            </a>
          ) : (
            <span>Next</span>
          )
        }
      </div>
    </nav>
  </footer>
</Layout>
